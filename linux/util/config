#!/usr/bin/env python3

import os

import argparse
import json


def File(filename):
  with open(filename, "r", encoding="utf-8") as f:
    d = json.load(f)
  return d


def update(d, key, value):
    *ks, ke = key.split(".")
    v = d
    for k in ks:
      k = k.strip()
      if isinstance(v, list):
        k = int(k)
      v = v[k]

    k = ke.strip()
    if isinstance(v, list) and k == "":
      v.append(value)
    else:
      if isinstance(v, list):
        k = int(k)
      if (isinstance(v, list) or (isinstance(v, dict) and k in v)) and isinstance(v[k], dict) and isinstance(value, dict):
        v[k].update(value)
      else:
        v[k] = value


def config(*, source, destination, keys, values, **kwargs):
  d = {}
  # if os.path.exists(destination):
  #   with open(destination, "r", encoding="utf-8") as f:
  #     d = json.load(f)
  with open(source, "r", encoding="utf-8") as f:
    d.update(json.load(f))

  for key, value in zip(keys, values):
    update(d, key, value)

  for key in keys[len(values) :]:
    types = {t.__name__: t for t in [str, int, float, bool]}
    while True:
      t = input(f"the type of {key} ({'/'.join(types.keys())}/null/json): ")
      if t in list(types.keys()) + ["null", "json"]:
        break
    if t == "null":
      value = None
    else:
      value = input(f"the value of {key}: ")
      if t in types:
        value = types[t](value)
      else:
        value = json.loads(value)
    update(d, key, value)

  os.makedirs(os.path.split(destination)[0], exist_ok=True)
  with open(destination, "w", encoding="utf-8") as f:
    json.dump(d, f, indent=2)


def main():
  parser = argparse.ArgumentParser(description="Config json file")
  parser.add_argument("-V", "--version", action="version", version="%(prog)s 0.1")

  parser.add_argument("source", help="source filename")
  parser.add_argument("destination", help="output filename")

  parser.add_argument("-k", "--key", help="the key to update json", action="append", dest="keys", metavar="KEY")
  parser.add_argument("-s", "--str", help="the value (string) to update json", action="append", type=str, dest="values", metavar="VALUE", default=[])
  parser.add_argument("-i", "--int", help="the value (integer) to update json", action="append", type=int, dest="values", metavar="VALUE", default=[])
  parser.add_argument("-f", "--float", help="the value (float) to update json", action="append", type=float, dest="values", metavar="VALUE", default=[])
  parser.add_argument("-b", "--bool", help="the value (boolean) to update json", action="append", type=bool, dest="values", metavar="VALUE", default=[])
  parser.add_argument("-n", "--null", help="the value (null) to update json", action="append_const", const=None, dest="values", metavar="VALUE", default=[])
  parser.add_argument("-j", "--json", help="the value (json string) to update json", action="append", type=json.loads, dest="values", metavar="VALUE", default=[])
  parser.add_argument("-F", "--file", help="the value (json filename) to update json", action="append", type=File, dest="values", metavar="VALUE", default=[])

  args = parser.parse_args()
  # print(args.keys)
  # print(args.values)

  config(**args.__dict__)


if __name__ == "__main__":
  main()
