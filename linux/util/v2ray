#!/bin/bash

DIR=$(cd $(dirname $0); pwd)
. ${DIR}/initial

ARGUMENTS=($@)

# install v2ray

readVariable "if install/update v2ray (y/n)" V2RAY_UPDATE y
if [[ ${V2RAY_UPDATE} == y ]]
then
  gitClone https://github.com/v2ray/v2ray-core.git ${GITHUB_PATH}/v2ray/v2ray-core
  sudo bash ${GITHUB_PATH}/v2ray/v2ray-core/release/install-release.sh
  sudo apt install jq zip uuid-runtime
fi


# config v2ray

V2RAY_SOURCE=${SETTINGS_PATH}/v2ray
V2RAY_TARGET=${SETTINGS_PATH}/test/v2ray/target
V2RAY_DOWNLOAD=${SETTINGS_PATH}/test/v2ray/download
rm -rf ${V2RAY_TARGET}
mkdir -p ${V2RAY_TARGET}

V2RAY_JSON=${V2RAY_TARGET}/v2ray.json
if [[ ${#ARGUMENTS[@]} -gt 0 ]]
then
  cp ${ARGUMENTS[0]} ${V2RAY_JSON}
else
  echo {} > ${V2RAY_JSON}
fi

readValue() {
  DEFAULT=$(jq -rM "$1" ${V2RAY_JSON})
  if [[ "${DEFAULT}" != null ]]
  then
    setVariable "$2" $3 "${DEFAULT}"
  else
    readVariable "$2" $3 $4
    V2RAY_JSONSTR=$(jq -M "$1"' = "'${!3}'"' ${V2RAY_JSON})
    echo "${V2RAY_JSONSTR}" > ${V2RAY_JSON}
  fi
}
readKeys() {
  DEFAULT=$(jq -rM "$1" ${V2RAY_JSON})
  if [[ "${DEFAULT}" != null ]]
  then
    DEFAULT=$(jq -rM "$1"' | keys | join(" ")' ${V2RAY_JSON})
    setVariable "$2" $3 "${DEFAULT}"
  else
    readVariable "$2" $3 $4
    V2RAY_JSONSTR=$(jq -M "$1"' = {}' ${V2RAY_JSON})
    echo "${V2RAY_JSONSTR}" > ${V2RAY_JSON}
  fi
}
setValue() {
  DEFAULT=$(jq -rM "$1" ${V2RAY_JSON})
  if [[ "${DEFAULT}" != null ]]
  then
    setVariable "$2" $3 "${DEFAULT}"
  else
    setVariable "$2" $3 $4
    V2RAY_JSONSTR=$(jq -M "$1"' = "'${!3}'"' ${V2RAY_JSON})
    echo "${V2RAY_JSONSTR}" > ${V2RAY_JSON}
  fi
}

readValue '.domain' "v2ray server domain" V2RAY_SERVER_ADDR
readValue '.v2ctl.port' "v2ray v2ctl port" V2RAY_V2CTL_PORT $(($RANDOM + 10000))
readValue '.vmess.port' "v2ray vmess port" V2RAY_VMESS_PORT $(($RANDOM + 10000))
setValue '.vmess.path' "v2ray vmess path" V2RAY_VMESS_PATH /$(uuidgen)/$(uuidgen)

${DIR}/config ${V2RAY_SOURCE}/server/config.json ${V2RAY_TARGET}/server/config.json -k inbounds.0.port -i ${V2RAY_V2CTL_PORT} -k inbounds.1.port -i ${V2RAY_VMESS_PORT} -k inbounds.1.settings.clients -j [] -k inbounds.1.streamSettings.wsSettings.path -s /

readKeys '.portals.portals' "v2ray reverse portals" V2RAY_PORTALS
V2RAY_PORTALS=(${V2RAY_PORTALS})
if [[ ${#V2RAY_PORTALS[@]} != 0 ]]
then
  readValue '.portals.port' "v2ray reverse port" V2RAY_REVERSE_PORT $(($RANDOM + 10000))
  setValue '.portals.path' "v2ray reverse path" V2RAY_REVERSE_PATH /$(uuidgen)/$(uuidgen)
  ${DIR}/config ${V2RAY_SOURCE}/reverse/inbound.json ${V2RAY_TARGET}/reverse/inbound.json -k port -i ${V2RAY_REVERSE_PORT}
  ${DIR}/config ${V2RAY_TARGET}/server/config.json ${V2RAY_TARGET}/server/config.json -k reverse.portals -j []

  for V2RAY_PORTAL in ${V2RAY_PORTALS[@]}
  do
    setValue '.portals.portals.'${V2RAY_PORTAL}.'id' "id of v2ray portal" V2RAY_PORTAL_ID $(uuidgen)
    ${DIR}/config ${V2RAY_SOURCE}/reverse/reverse.json ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/reverse.json -k tag -s ${V2RAY_PORTAL} -k domain -s ${V2RAY_PORTAL}.${V2RAY_PORTAL_ID}.${V2RAY_SERVER_ADDR}
    ${DIR}/config ${V2RAY_SOURCE}/reverse/outbound.json ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/outbound.json -k settings.vnext.0.address -s ${V2RAY_SERVER_ADDR} -k settings.vnext.0.users.0.id -s ${V2RAY_PORTAL_ID} -k streamSettings.wsSettings.path -s ${V2RAY_REVERSE_PATH} -k tag -s ${V2RAY_PORTAL}
    ${DIR}/config ${V2RAY_SOURCE}/reverse/rule1.json ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/rule1.json -k user. -s ${V2RAY_PORTAL} -k outboundTag -s ${V2RAY_PORTAL}
    ${DIR}/config ${V2RAY_SOURCE}/reverse/rule2.json ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/rule2.json -k domain. -s full:${V2RAY_PORTAL}.${V2RAY_PORTAL_ID}.${V2RAY_SERVER_ADDR} -k inboundTag. -s reverse -k outboundTag -s ${V2RAY_PORTAL}
    ${DIR}/config ${V2RAY_SOURCE}/reverse/rule3.json ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/rule3.json -k inboundTag. -s reverse -k outboundTag -s direct
    ${DIR}/config ${V2RAY_TARGET}/server/config.json ${V2RAY_TARGET}/server/config.json -k reverse.portals. -F ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/reverse.json -k routing.rules. -F ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/rule1.json

    ${DIR}/config ${V2RAY_SOURCE}/client/client.json ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/client.json -k email -s ${V2RAY_PORTAL} -k id -s ${V2RAY_PORTAL_ID} -k alterId -i 1024
  done
fi

addClient() {
  V2RAY_CLIENT=$1
  V2RAY_CLIENT_ID=$2
  ${DIR}/config ${V2RAY_SOURCE}/client/client.json ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/client.json -k email -s ${V2RAY_CLIENT} -k id -s ${V2RAY_CLIENT_ID} -k alterId -i 64
  ${DIR}/config ${V2RAY_TARGET}/server/config.json ${V2RAY_TARGET}/server/config.json -k inbounds.1.settings.clients. -F ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/client.json
  ${DIR}/config ${V2RAY_SOURCE}/client/outbound.json ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/outbound.json -k settings.vnext.0.address -s ${V2RAY_SERVER_ADDR} -k settings.vnext.0.users.0.id -s ${V2RAY_CLIENT_ID} -k streamSettings.wsSettings.path -s ${V2RAY_VMESS_PATH}
}

readKeys '.clients' "v2ray clients" V2RAY_CLIENTS
V2RAY_CLIENTS=(${V2RAY_CLIENTS})
for V2RAY_CLIENT in ${V2RAY_CLIENTS[@]}
do
  setValue '.clients.'${V2RAY_CLIENT}'.id' "id of v2ray client ${V2RAY_CLIENT}" V2RAY_CLIENT_ID $(uuidgen)
  addClient ${V2RAY_CLIENT} ${V2RAY_CLIENT_ID}

  V2RAY_CLIENT_PORT=1080
  V2RAY_CLIENT_PORT=$((${V2RAY_CLIENT_PORT} + 1))
  setValue '.clients.'${V2RAY_CLIENT}'.gfwport' "gfwlist port of v2ray client ${V2RAY_CLIENT}" V2RAY_CLIENT_GFWPORT ${V2RAY_CLIENT_PORT}
  V2RAY_CLIENT_PORT=$((${V2RAY_CLIENT_PORT} + 1))
  setValue '.clients.'${V2RAY_CLIENT}'.allport' "allsite port of v2ray client ${V2RAY_CLIENT}" V2RAY_CLIENT_ALLPORT ${V2RAY_CLIENT_PORT}
  ${DIR}/config ${V2RAY_SOURCE}/client/config.json ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/config.json -k outbounds. -F ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/outbound.json -k inbounds.0.port -i ${V2RAY_CLIENT_GFWPORT} -k inbounds.1.port -i ${V2RAY_CLIENT_ALLPORT}

  if [[ ${#V2RAY_PORTALS[@]} != 0 ]]
  then
    readKeys '.clients.'${V2RAY_CLIENT}'.portalports' "reverse portals of client ${V2RAY_CLIENT}" V2RAY_CLIENT_PORTALS
    V2RAY_CLIENT_PORTALS=(${V2RAY_CLIENT_PORTALS})
    if [[ ${#V2RAY_CLIENT_PORTALS[@]} != 0 ]]
    then
      for V2RAY_CLIENT_PORTAL in ${V2RAY_CLIENT_PORTALS[@]}
      do
        V2RAY_CLIENT_PORT=$((${V2RAY_CLIENT_PORT} + 1))
        setValue '.clients.'${V2RAY_CLIENT}'.portalports.'${V2RAY_CLIENT_PORTAL} "portal ${V2RAY_CLIENT_PORTAL} port of v2ray client ${V2RAY_CLIENT}" V2RAY_CLIENT_PORTALPORT ${V2RAY_CLIENT_PORT}
        ${DIR}/config ${V2RAY_SOURCE}/client/inbound.json ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/inbound.json -k port -i ${V2RAY_CLIENT_PORTALPORT} -k tag -s ${V2RAY_CLIENT_PORTAL}
        ${DIR}/config ${V2RAY_SOURCE}/reverse/rule3.json ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/rule3.json -k inboundTag. -s ${V2RAY_CLIENT_PORTAL} -k outboundTag -s ${V2RAY_CLIENT_PORTAL}
        ${DIR}/config ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/config.json ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/config.json -k outbounds. -F ${V2RAY_TARGET}/reverse/${V2RAY_CLIENT_PORTAL}/outbound.json -k inbounds. -F ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/inbound.json -k routing.rules. -F ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/rule3.json
      done
    fi
  fi
done

if [[ ${#V2RAY_PORTALS[@]} != 0 ]]
then
  V2RAY_ADD_CLIENTS=${V2RAY_CLIENTS[@]}
  for V2RAY_PORTAL in ${V2RAY_PORTALS[@]}
  do
    readValue '.portals.portals.'${V2RAY_PORTAL}'.user' "user of v2ray bridge ${V2RAY_PORTAL}" V2RAY_CLIENT ${V2RAY_PORTAL}
    if [[ "${V2RAY_ADD_CLIENTS} " != *"${V2RAY_CLIENT} "* ]]
    then
      setValue '.addclients.'${V2RAY_CLIENT}'.id' "id of v2ray addclient ${V2RAY_CLIENT}" V2RAY_CLIENT_ID $(uuidgen)
      addClient ${V2RAY_CLIENT} ${V2RAY_CLIENT_ID}

      V2RAY_ADD_CLIENTS="${V2RAY_ADD_CLIENTS} ${V2RAY_CLIENT}"
    fi

    V2RAY_CLIENT_PORT=1080
    V2RAY_CLIENT_PORT=$((${V2RAY_CLIENT_PORT} + 1))
    setValue '.portals.portals.'${V2RAY_PORTAL}'.gfwport' "gfwlist port of v2ray bridge ${V2RAY_CLIENT}" V2RAY_CLIENT_GFWPORT ${V2RAY_CLIENT_PORT}
    V2RAY_CLIENT_PORT=$((${V2RAY_CLIENT_PORT} + 1))
    setValue '.portals.portals.'${V2RAY_PORTAL}'.allport' "allsite port of v2ray bridge ${V2RAY_CLIENT}" V2RAY_CLIENT_ALLPORT ${V2RAY_CLIENT_PORT}
    ${DIR}/config ${V2RAY_SOURCE}/client/config.json ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/config.json -k outbounds. -F ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/outbound.json -k outbounds. -F ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/outbound.json -k inbounds.0.port -i ${V2RAY_CLIENT_GFWPORT} -k inbounds.1.port -i ${V2RAY_CLIENT_ALLPORT} -k reverse.bridges -j [] -k reverse.bridges. -F ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/reverse.json -k reverse.bridges.0.tag -s reverse -k routing.rules. -F ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/rule2.json -k routing.rules. -F ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/rule3.json

    readKeys '.portals.portals.'${V2RAY_PORTAL}'.portalports' "reverse portals of bridge ${V2RAY_PORTAL}" V2RAY_CLIENT_PORTALS
    V2RAY_CLIENT_PORTALS=(${V2RAY_CLIENT_PORTALS})
    if [[ ${#V2RAY_CLIENT_PORTALS[@]} != 0 ]]
    then
      for V2RAY_CLIENT_PORTAL in ${V2RAY_CLIENT_PORTALS[@]}
      do
        V2RAY_CLIENT_PORT=$((${V2RAY_CLIENT_PORT} + 1))
        setValue '.portals.portals.'${V2RAY_PORTAL}'.portalports.'${V2RAY_CLIENT_PORTAL} "portal ${V2RAY_CLIENT_PORTAL} port of v2ray bridge ${V2RAY_CLIENT}" V2RAY_CLIENT_PORTALPORT ${V2RAY_CLIENT_PORT}
        ${DIR}/config ${V2RAY_SOURCE}/client/inbound.json ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/inbound.json -k port -i ${V2RAY_CLIENT_PORT} -k tag -s ${V2RAY_CLIENT_PORTAL}
        ${DIR}/config ${V2RAY_SOURCE}/reverse/rule3.json ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/rule3.json -k inboundTag. -s ${V2RAY_CLIENT_PORTAL} -k outboundTag -s ${V2RAY_CLIENT_PORTAL}
        if [[ ${V2RAY_CLIENT_PORTAL} != ${V2RAY_PORTAL} ]]
        then
          ${DIR}/config ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/config.json ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/config.json -k outbounds. -F ${V2RAY_TARGET}/reverse/${V2RAY_CLIENT_PORTAL}/outbound.json
        fi
        ${DIR}/config ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/config.json ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/config.json -k inbounds. -F ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/inbound.json -k routing.rules. -F ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/rule3.json
      done
    fi

    ${DIR}/config ${V2RAY_TARGET}/reverse/inbound.json ${V2RAY_TARGET}/reverse/inbound.json -k settings.clients. -F ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/client.json
  done

  ${DIR}/config ${V2RAY_TARGET}/server/config.json ${V2RAY_TARGET}/server/config.json -k inbounds. -F ${V2RAY_TARGET}/reverse/inbound.json
fi

logging info "copy config.json to /etc/v2ray/config.json"

rm -rf ${V2RAY_DOWNLOAD} ${V2RAY_DOWNLOAD}.zip
mkdir -p ${V2RAY_DOWNLOAD}/clients
mkdir -p ${V2RAY_DOWNLOAD}/bridges

zip -q9j ${V2RAY_DOWNLOAD}/server.zip ${V2RAY_TARGET}/server/config.json
for V2RAY_CLIENT in ${V2RAY_CLIENTS[@]}
do
  zip -q9j ${V2RAY_DOWNLOAD}/clients/${V2RAY_CLIENT}.zip ${V2RAY_TARGET}/client/${V2RAY_CLIENT}/config.json
done
for V2RAY_PORTAL in ${V2RAY_PORTALS[@]}
do
  zip -q9j ${V2RAY_DOWNLOAD}/bridges/${V2RAY_PORTAL}.zip ${V2RAY_TARGET}/reverse/${V2RAY_PORTAL}/config.json
done
cp ${V2RAY_JSON} ${V2RAY_DOWNLOAD}/../v2ray.json
pushd ${V2RAY_DOWNLOAD}/.. > /dev/null && zip -q0r download.zip download v2ray.json && popd > /dev/null
logging info "you can run '$0 ${SETTINGS_PATH}/test/v2ray/v2ray.json' the next time"
logging info "download configuration files from ${V2RAY_DOWNLOAD}.zip"

logging warning "config <Location> in /etc/apache2/sites-enabled/domain-le-ssl.conf"
echo "# ==== /etc/apache2/sites-enabled/domain-le-ssl.conf"
echo "<Location ${V2RAY_VMESS_PATH}>"
echo "	ProxyPass ws://127.0.0.1:${V2RAY_VMESS_PORT}/ Upgrade=WebSocket"
echo "</Location>"
if [[ ${#V2RAY_PORTALS[@]} != 0 ]]
then
  echo "<Location ${V2RAY_REVERSE_PATH}>"
  echo "	ProxyPass ws://127.0.0.1:${V2RAY_REVERSE_PORT}/ Upgrade=WebSocket"
  echo "</Location>"
  echo "# ==== /etc/apache2/sites-enabled/domain-le-ssl.conf"
fi
sudo systemctl reload apache2.service
pause

sudo cp ${V2RAY_TARGET}/server/config.json /etc/v2ray/config.json
sudo systemctl restart v2ray.service

logging info "config v2ray done"
